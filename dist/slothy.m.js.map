{"version":3,"file":"slothy.m.js","sources":["../src/index.js"],"sourcesContent":["/**\n * Lazy load images\n *\n * @param {Object=} options Configuration options for slothy\n * @param {String|Number} options.offset Offset from image in px to start loading, defaults to 100px\n * @param {Number} options.threshold Either a single number or an array of numbers which indicate\n *                                   at what percentage of the target's visibility the observer's callback should be executed.\n * @param {Function} options.onLoad Function triggered when image is done loading\n * @param {String} options.dataSelector Data selector on element. Default is \"slothy\"\n */\nfunction slothy ({ offset = 100, threshold = 0.01, onLoad, dataSelector = 'slothy' } = {}) {\n  const images = Array.from(document.querySelectorAll(`[data-${dataSelector}]`))\n\n  if (!('IntersectionObserver' in window)) {\n    images.forEach(preloadImage)\n    return images\n  }\n\n  images.forEach(setPlaceholder)\n\n  const rootMargin = `${offset}px 0px`\n  const config = {\n    rootMargin,\n    threshold\n  }\n\n  function onIntersection (entries) {\n    entries.forEach(entry => {\n      if (entry.intersectionRatio > 0) {\n        observer.unobserve(entry.target)\n        preloadImage(entry.target)\n      }\n    })\n  }\n\n  function preloadImage (image) {\n    const src = image.dataset[dataSelector]\n\n    if (!src) {\n      return\n    }\n\n    image.src = src\n    image.onload = () => {\n      onLoad && onLoad(image)\n      delete image.dataset[dataSelector]\n    }\n  }\n\n  const observer = new IntersectionObserver(onIntersection, config)\n\n  images.forEach(image => observer.observe(image))\n\n  return images\n}\n\nfunction setPlaceholder (image) {\n  const width = image.clientWidth\n  const height = image.clientHeight\n\n  if (width && height) {\n    image.src = `data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 ${width} ${height}\"%3E%3C/svg%3E`\n  }\n}\n\nexport default slothy\n"],"names":["setPlaceholder","image","width","clientWidth","height","clientHeight","src","ref","images","Array","from","document","querySelectorAll","dataSelector","window","forEach","preloadImage","dataset","onload","onLoad","observer","IntersectionObserver","entries","entry","intersectionRatio","unobserve","target","offset","threshold","observe"],"mappings":"AAwDA,SAASA,EAAgBC,OACjBC,EAAQD,EAAME,YACdC,EAASH,EAAMI,aAEjBH,GAASE,IACXH,EAAMK,IAAO,6EAA4EJ,MAASE,mCAnDtG,SAAiBG,kBAAsE,kCAA3D,sCAAiB,oDAA6B,cAClEC,EAASC,MAAMC,KAAKC,SAASC,0BAA0BC,aAEvD,yBAA0BC,eAC9BN,EAAOO,QAAQC,GACRR,WAoBAQ,EAAcf,OACfK,EAAML,EAAMgB,QAAQJ,GAErBP,IAILL,EAAMK,IAAMA,EACZL,EAAMiB,kBACJC,GAAUA,EAAOlB,UACVA,EAAMgB,QAAQJ,KA3BzBL,EAAOO,QAAQf,OA+BToB,EAAW,IAAIC,8BAvBIC,GACvBA,EAAQP,iBAAQQ,GACVA,EAAMC,kBAAoB,IAC5BJ,EAASK,UAAUF,EAAMG,QACzBV,EAAaO,EAAMG,YATV,YADKC,qBAGlBC,WA4BFpB,EAAOO,iBAAQd,UAASmB,EAASS,QAAQ5B,KAElCO"}